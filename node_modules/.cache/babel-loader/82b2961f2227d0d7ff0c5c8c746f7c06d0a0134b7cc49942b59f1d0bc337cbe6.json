{"ast":null,"code":"var _jsxFileName = \"D:\\\\3_year\\\\JFSD-Microservices\\\\FrontendMicroservices\\\\src\\\\pages\\\\ChatGptComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatGptComponent = () => {\n  _s();\n  const [input, setInput] = useState('');\n  const [response, setResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleSendMessage = async () => {\n    setIsLoading(true);\n    try {\n      const res = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`\n        },\n        body: JSON.stringify({\n          model: \"gpt-3.5-turbo\",\n          // or \"gpt-4\" if you're using GPT-4\n          messages: [{\n            role: \"user\",\n            content: input\n          }]\n        })\n      });\n      const data = await res.json();\n      setResponse(data.choices[0].message.content);\n    } catch (error) {\n      console.error('Error:', error);\n      setResponse('Sorry, something went wrong.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Chat with GPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: input,\n      onChange: handleInputChange,\n      placeholder: \"Type your message here...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      disabled: isLoading,\n      children: isLoading ? 'Sending...' : 'Send'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Response:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: response\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatGptComponent, \"U8gjgBCudzJc64rHxPiheUqoA+A=\");\n_c = ChatGptComponent;\nexport default ChatGptComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatGptComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatGptComponent","_s","input","setInput","response","setResponse","isLoading","setIsLoading","handleInputChange","e","target","value","handleSendMessage","res","fetch","method","headers","process","env","REACT_APP_OPENAI_API_KEY","body","JSON","stringify","model","messages","role","content","data","json","choices","message","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/3_year/JFSD-Microservices/FrontendMicroservices/src/pages/ChatGptComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst ChatGptComponent = () => {\r\n  const [input, setInput] = useState('');\r\n  const [response, setResponse] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleInputChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSendMessage = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await fetch('https://api.openai.com/v1/chat/completions', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${process.env.REACT_APP_OPENAI_API_KEY}`,\r\n        },\r\n        body: JSON.stringify({\r\n          model: \"gpt-3.5-turbo\", // or \"gpt-4\" if you're using GPT-4\r\n          messages: [{ role: \"user\", content: input }],\r\n        }),\r\n      });\r\n\r\n      const data = await res.json();\r\n      setResponse(data.choices[0].message.content);\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n      setResponse('Sorry, something went wrong.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Chat with GPT</h2>\r\n      <textarea\r\n        value={input}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Type your message here...\"\r\n      />\r\n      <br />\r\n      <button onClick={handleSendMessage} disabled={isLoading}>\r\n        {isLoading ? 'Sending...' : 'Send'}\r\n      </button>\r\n      <div>\r\n        <h3>Response:</h3>\r\n        <p>{response}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatGptComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}